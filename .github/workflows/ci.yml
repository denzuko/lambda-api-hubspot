---
name: AWS Serverless Hubspot

on:
  push:
  release:
    types: [published, created, edited]

jobs:
  qa:
    name: 'QA Testing'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependancies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          [ -f requirements.txt ] &&  pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 . \
            --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . \
            --count --exit-zero --max-complexity=10 --max-line-length=127  \
            --statistics
      - name: Test with pytest
        run: pytest

  terraform:
    name: 'Terraform infrastructure'
    runs-on: ubuntu-latest
    needs: qa

    # Use the Bash shell regardless whether the GitHub Actions runner
    # is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure
      # the Terraform CLI configuration file with a Terraform Cloud
      # user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating
      # initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere
      # to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          # TF_VAR_account_id: ${{ secrets.TKLHUB_ACCOUNT_ID }}
          # TF_VAR_external_id: ${{ secrets.TKLHUB_EXTERNAL_ID }}

  deploy:
    name: e2e 
    runs-on: ubuntu-latest
    needs: terraform
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm ci

      - name: Execute Postman tests
        run: npx newman run ${{ secrets.POSTMAN_COLLECTION }}
        env:
          POSTMAN_API_KEY_ALIAS: ${{ secrets.POSTMAN_API_KEY_ALIAS }}


  security:
    name: Security Check
    runs-on: ubumtu-latest
    steps:
      - name: Test for public vulnerablilties
        use: npx is-website-vulnerable
        with:
          scan-url: "https:/example.com/"
...
